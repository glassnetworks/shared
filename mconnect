#!/bin/bash
####################################################################################
## Purpose:     Connection Menu for Support Accounts
## Author:      Mike Gomon
## Date:        10/29/2014
## Revision:    0.8
##
## Changelog:   0.1 - Initial commit
##              0.2 - Added additional logic to the $HOME/.ssh/config for permissions
##                  - Improved the exitMenu function for reconnecting when exit host
##              0.3 - Added function to pull acct. lists from the RDM Database
##              0.4 - Added the remaining accounts that have linux servers
##              0.5 - Added new menu with a single column rather than 3
##              0.6 - Removed Affinity from the supported accounts
##              0.7 - Added check for account list file permissions
##              0.8 - Added trap for CTRL+C and fixed an issue with $HOME/.ssh
#####################################################################################

# Main Script settings
title='Account Connection Menu'

# Database settings
dBServerIP=<db_IP/hostname>
dBUsername=<db_username>
dBPassword=<db_password>
sqlQPath=/usr/scripts/queries

# Export vars
export dBServerIP dBUsername dBPassword sqlQPath

# This will stop any attempts at using CTRL+C
function otherCommands()
{
    printf "\r\e[31mNOTICE\e[0m: Invalid Option"
    sleep 1
    mainMenu
    exit 0
}

trap 'otherCommands' SIGINT

# This function needs to be changed to reflect the new accounts being added.
function buildAcctList()
{
    # make the name of the file var lowercase
    sqlFile=`echo $AcctName|tr '[:upper:]' '[:lower:]'`.sql

    # remove file if its exists to start a clean one
    if [[ -f $AcctList ]]; then
        rm -rf $AcctList
    fi

    # query database with specific details in the sql file (custom formatting - may not be needed depending on output)
    # this formatting is from a Remote Desktop Manager database
    if [[ "$AcctName" = "Account1" ]]; then
        sqlcmd -S $dBServerIP -U $dBUsername -P $dBPassword -i $sqlQPath/$sqlFile -y0| \
        awk -F'[<>]' 'BEGIN{a["D"]="Dev";a["Q"]="Test"} /Name/{name=$3; type=a[substr(name,length(name))]; if (length(type)==0) type="Prod";} /SessionHost/{print type, name, $3;}'|sort -u > $AcctList

    elif [[ "$AcctName" = "Account2" ]]; then
        sqlcmd -S $dBServerIP -U $dBUsername -P $dBPassword -i $sqlQPath/$sqlFile -y0| \
        awk -F'[<>]' '/Name/{name=$3;type="Non-Prd";if(name ~ /^STK(SPR|PR|SVBLKU|SVBLOCK)/) type="Prod"} /SessionHost/+/Host/{print type, name, $3;}'|sort -u > $AcctList

    elif [[ "$AcctName" = "Account3" ]]; then
        sqlcmd -S $dBServerIP -U $dBUsername -P $dBPassword -i $sqlQPath/$sqlFile -y0| \
        awk -F'[<>]' '/Name/{name=$3;type="AutoSOW";if(name ~ /^LFVSFCP/) type="AV"} /SessionHost/+/Host/{print type, name, $3;}'|sort -u > $AcctList

    elif [[ "$AcctName" = "Account4" ]]; then
        sqlcmd -S $dBServerIP -U $dBUsername -P $dBPassword -i $sqlQPath/$sqlFile -y0| \
        awk -F'[<>]' '/Name/{name=$3;type="Test";if(name ~ /^LINUX/) type="Prod"} /SessionHost/+/Host/{print type, name, $3;}'|sort -u > $AcctList
    fi

    # change permissions on $AcctList
    chmod 666 $AcctList
    chgrp dbadmin $AcctList
}

function AcctConn()
{
    # build new account file
    buildAcctList

    # begin menu choices for environment
    unset env
    echo -e "\n\e[32mAccount\e[0m: $AcctName\n"
    if [[ "$AcctName" = "Account1" ]]; then
        read -p "Choose the environment: (prod/test/dev) " env
        while [[ "$env" != "prod" && "$env" != "dev" && "$env" != "test" && "$env" != "p" && "$env" != "d" && "$env" != "t" ]]; do
            echo -e "\e[31mNOTICE\e[0m: Please answer (p)rod, (t)est or (d)ev. Try again.\n"
            read -p "Choose the environment: (prod/dev/test) " env
        done
    elif [[ "$AcctName" = "Account2" ]]; then
        read -p "Choose the environment: (prod/non-prod) " env
                while [[ "$env" != "prod" && "$env" != "non-prod" && "$env" != "p" && "$env" != "n" ]]; do
                        echo -e "\e[31mNOTICE\e[0m: Please answer (p)rod or (n)on-prod. Try again.\n"
                        read -p "Choose the environment: (prod/non-prod) " env
                done
        elif [[ "$AcctName" = "Account3" ]]; then
                read -p "Choose the environment: (av/autosow) " env
                while [[ "$env" != "av" && "$env" != "v" && "$env" != "autosow" && "$env" != "s" ]]; do
                        echo -e "\e[31mNOTICE\e[0m: Please answer a(v) or auto(s)ow. Try again.\n"
                        read -p "Choose the environment: (av/autosow) " env
                done
    elif [[ "$AcctName" = "Account4" ]]; then
                env='sprod'
    fi

    if [[ "$env" = "prod" || "$env" = "p" ]]; then
        echo -e "\n\e[32m\e[4m$AcctName Production Servers\e[0m:"
        svhost=(`grep -i prod $AcctList|awk {'print $2'}`)
        ipaddr=(`grep -i prod $AcctList|awk {'print $3'}`)
        Num=-1
        for host in ${svhost[@]}
            do (( Num++ ))
            echo ${Num}. $host
        done
    fi

    if [[ "$env" = "sprod" || "$env" = "sp" ]]; then
                echo -e "\e[32m\e[4m$AcctName Production Servers\e[0m:"
                svhost=(`grep -i prod $AcctList|awk {'print $2'}`)
                ipaddr=(`grep -i prod $AcctList|awk {'print $3'}`)
                Num=-1
                for host in ${svhost[@]}
                        do (( Num++ ))
                        echo ${Num}. $host
                done
        fi

        if [[ "$env" = "test" || "$env" = "t" ]]; then
                echo -e "\n\e[32m\e[4m$AcctName Test Servers\e[0m:"
                svhost=(`grep -i test $AcctList|awk {'print $2'}`)
                ipaddr=(`grep -i test $AcctList|awk {'print $3'}`)
                Num=-1
                for host in ${svhost[@]}
                        do (( Num++ ))
                        echo ${Num}. $host
                done
        fi

        if [[ "$env" = "dev" || "$env" = "d" ]]; then
        echo -e "\n\e[32m\e[4m$AcctName Development Servers\e[0m:"
                svhost=(`grep -i dev $AcctList|awk {'print $2'}`)
                ipaddr=(`grep -i dev $AcctList|awk {'print $3'}`)
                Num=-1
                for host in ${svhost[@]}
                        do (( Num++ ))
                        echo ${Num}. $host
                done
        fi

        if [[ "$env" = "non-prod" || "$env" = "n" ]]; then
                echo -e "\n\e[32m\e[4m$AcctName Non-Prod Servers\e[0m:"
                svhost=(`grep -i non-prd $AcctList|awk {'print $2'}`)
                ipaddr=(`grep -i non-prd $AcctList|awk {'print $3'}`)
                Num=-1
                for host in ${svhost[@]}
                        do (( Num++ ))
                        echo ${Num}. $host
                done
        fi

        if [[ "$env" = "av" || "$env" = "v" ]]; then
                echo -e "\n\e[32m\e[4m$AcctName Anti-Virus Servers\e[0m:"
                svhost=(`grep -i av $AcctList|awk {'print $2'}`)
                ipaddr=(`grep -i av $AcctList|awk {'print $3'}`)
                Num=-1
                for host in ${svhost[@]}
                        do (( Num++ ))
                        echo ${Num}. $host
                done
        fi

        if [[ "$env" = "autosow" || "$env" = "s" ]]; then
                echo -e "\n\e[32m\e[4m$AcctName AutoSOW Servers\e[0m:"
                svhost=(`grep -i autosow $AcctList|awk {'print $2'}`)
                ipaddr=(`grep -i autosow $AcctList|awk {'print $3'}`)
                Num=-1
                for host in ${svhost[@]}
                        do (( Num++ ))
                        echo ${Num}. $host
                done
        fi

    unset sNum
    echo ""
        read -p "Enter number to connect: " sNum
        while [[ "$sNum" = "" ]]; do
                echo -e "\e[31mNOTICE\e[0m: Please choose a number from above. Try again.\n"
        read -p "Enter number to connect: " sNum
        done

    # set $variable for connection and echo statement
    shostn=${svhost[$sNum]}
        server=${ipaddr[$sNum]}
    export uName server shostn

    echo -e "\n\e[32mConnecting to\e[0m: $shostn\n"

    unset uName
        read -p "Enter username: " uName
        while [[ "$uName" = "" ]]; do
                echo -e "\e[31mNOTICE\e[0m: Please enter username to connect with. Try again.\n"
                read -p "Enter number to connect: " uName
        done
    echo ""

    # open ssh connection to selected server
    ssh -q $uName@$server
    exitMenu
}

function exitMenu()
{
    unset ynr
    echo -e "\e[31mConnection closed\e[0m.\n"
        read -p "Return to the connection menu (y/n) or reconnect (r)? " ynr
        while [[ "$ynr" != "yes" && "$ynr" != "no" && "$ynr" != "y" && "$ynr" != "n" && "$ynr" != "r" && "$ynr" != "reconnect" ]]; do
                echo -e "\e[31mNOTICE\e[0m: Please answer (y)es, (n)o or (r)econnect. Try again.\n"
        read -p "Return to the connection menu (y/n) or reconnect (r)? " ynr
        done
    if [[ "$ynr" = "y" || "$ynr" = "yes" ]]; then
        mainMenu
    elif [[ "$ynr" = "r" || "$ynr" = "reconnect" ]]; then
        echo -e "\n\e[32mReconnecting to\e[0m: $shostn\n"
        ssh -q $uName@$server
        exitMenu
    else
        exit 0
    fi
}

function strictCheck()
{
    if [[ -f "$HOME/.ssh/config" ]]; then
        if [[ -z $(grep StrictHostKeyChecking $HOME/.ssh/config) ]]; then
            echo -e "\n\e[31mNOTICE\e[0m: \e[32mStrictHostKeyChecking\e[0m does not exist in $HOME/.ssh/config, adding."
            echo -e "StrictHostKeyChecking no" >> $HOME/.ssh/config
        fi
        if [[ -n $(find $HOME/.ssh/ -name config ! -perm 640) ]]; then
            echo -e "\n\e[31mNOTICE\e[0m: \e[32mIncorrect Permissions\e[0m set on $HOME/.ssh/config, setting to 640."
            chmod 640 $HOME/.ssh/config
        fi
    else
        echo -e "\n\e[31mNOTICE\e[0m: \e[32m$HOME/.ssh/config\e[0m does not exist, creating config."
        mkdir -p $HOME/.ssh
        touch $HOME/.ssh/config
        if [[ -n $(find $HOME/.ssh/ -name config ! -perm 640) ]]; then
                        echo -e "\e[31mNOTICE\e[0m: \e[32mIncorrect Permissions\e[0m set on $HOME/.ssh/config, setting to 640."
                        chmod 640 $HOME/.ssh/config
                fi
        echo -e "\e[31mNOTICE\e[0m: \e[32mStrictHostKeyChecking\e[0m does not exist in $HOME/.ssh/config, adding."
                echo -e "StrictHostKeyChecking no" >> $HOME/.ssh/config
    fi
}

function mainMenu()
{
        echo -e "\n********************************************************"
        echo -e "*************** \e[1m$title\e[0m ****************"
        echo -e "********************************************************\n"

cat <<EOF
1) Willis
2) KEES
3) Honeywell
4) Ixia
q) Quit
EOF

    echo
    #echo -n "Choose Account: "
    #read -n 1 -p "Choose Account: " opt
    read -p "Choose Account: " opt

    case "$opt" in
        1|Willis)
        AcctList=/usr/scripts/connections/WillisAccount
                AcctName='Account1'
                AcctConn
                ;;
       2|KEES)
                AcctList=/usr/scripts/connections/KEESAccount
                AcctName='Account2'
                AcctConn
                ;;
           3|Honeywell)
                AcctList=/usr/scripts/connections/HoneywellAccount
                AcctName='Account3'
                AcctConn
                ;;
           4|Ixia)
                AcctList=/usr/scripts/connections/IxiaAccount
                AcctName='Account4'
                AcctConn
                ;;
           q|Quit)
             exit 0
                ;;
       *)
        echo -e "\e[31mNOTICE\e[0m: Invalid Option"
        $0
        ;;
    esac
}

# enter check and then main menu
strictCheck
mainMenu

#End of script
